/****************************************************************************
 * @file     mcan.h
 * @version  V1.00
 * @brief    M253 series MCAN driver source file
 *
 * SPDX-License-Identifier: Apache-2.0
 * @copyright (C) 2020 Nuvoton Technology Corp. All rights reserved.
 *****************************************************************************/

#ifndef __MCAN_H__
#define __MCAN_H__

#ifdef __cplusplus
extern "C"
{
#endif

/** @addtogroup Standard_Driver Standard Driver
  @{
*/

/** @addtogroup MCAN_Driver MCAN Driver
  @{
*/

/** @addtogroup MCAN_EXPORTED_CONSTANTS MCAN Exported Constants
  @{
*/

#define MCAN_OP_CAN_MODE     0
#define MCAN_OP_CAN_FD_MODE  1

/* Reserved number of elements in Message RAM - used for calculation of start addresses within RAM Configuration
   some element_numbers set to less than max, to stay altogether below 256 words of MessageRAM requirement*/
#define MCAN_MAX_11_BIT_FTR_ELEMS    128ul  /*!<  maximum is 128 11-bit Filter */
#define MCAN_MAX_29_BIT_FTR_ELEMS    64ul   /*!<  maximum is  64 29-bit Filter */
#define MCAN_MAX_RX_FIFO0_ELEMS      64ul   /*!<  maximum is  64 Rx FIFO 0 elements */
#define MCAN_MAX_RX_FIFO1_ELEMS      64ul   /*!<  maximum is  64 Rx FIFO 1 elements */
#define MCAN_MAX_RX_BUF_ELEMS        64ul   /*!<  maximum is  64 Rx Buffers */
#define MCAN_MAX_TX_BUF_ELEMS        32ul   /*!<  maximum is  32 Tx Buffers */
#define MCAN_MAX_TX_EVNT_FIFO_ELEMS  32ul   /*!<  maximum is  32 Tx Event FIFO elements */

/* MCAN sram address  */
#define MCAN_SRAM_BASE_ADDR          MCAN_BASE + 0x200ul

/* MCAN  Mask all interrupt */
#define MCAN_INT_ALL_SIGNALS         0x3FFFFFFFul

/* Maximum size of a MCAN frame. Must be a valid CAN FD value */
#define MCAN_MAX_MESSAGE_BYTES     64

/* Maximum size of a MCAN frame. Must be a valid CAN FD value */
#define MCAN_MAX_MESSAGE_WORDS     MCAN_MAX_MESSAGE_BYTES/4

/*  Receive message buffer helper macro */
#define MCAN_RX_BUFFER_STD(id, mbIdx)               (7UL << 27) | ((id & 0x7FF) << 16) | (mbIdx & 0x3F)

/* Receive message buffer extended helper macro - low */
#define MCAN_RX_BUFFER_EXT_LOW(id, mbIdx)           (7UL << 29) | (id & 0x1FFFFFFFUL)

/*  Receive message buffer extended helper macro - high */
#define MCAN_RX_BUFFER_EXT_HIGH(id, mbIdx)          (mbIdx & 0x3FUL)

/*  MCAN Rx FIFO 0 Mask helper macro. */
#define MCAN_RX_FIFO0_STD_MASK(match, mask)         (2UL << 30) | (1UL << 27) | ((match & 0x7FF) << 16) | (mask & 0x7FF)

/*! MCAN Rx FIFO 0 extended Mask helper macro - low. */
#define MCAN_RX_FIFO0_EXT_MASK_LOW(match)           (1UL << 29) | ((match & 0x1FFFFFFF))

/* MCAN Rx FIFO 0 extended Mask helper macro - high. */
#define MCAN_RX_FIFO0_EXT_MASK_HIGH(mask)           (2UL << 30) | ((mask & 0x1FFFFFFF))

/*  MCAN Rx FIFO 1 Mask helper macro. */
#define MCAN_RX_FIFO1_STD_MASK(match, mask)         (2UL << 30) | (2UL << 27) | ((match & 0x7FF) << 16) | (mask & 0x7FF)

/* MCAN Rx FIFO 1 extended Mask helper macro - low. */
#define MCAN_RX_FIFO1_EXT_MASK_LOW(match)           (2UL << 29) | ((match & 0x1FFFFFFF))

/* MCAN Rx FIFO 1 extended Mask helper macro - high. */
#define MCAN_RX_FIFO1_EXT_MASK_HIGH(mask)           (2UL << 30) | ((mask & 0x1FFFFFFF))


/* MCAN frame data field size. */
typedef enum
{
    eMCAN_BYTE8  = 0, /*!< 8 byte data field. */
    eMCAN_BYTE12 = 1, /*!< 12 byte data field. */
    eMCAN_BYTE16 = 2, /*!< 16 byte data field. */
    eMCAN_BYTE20 = 3, /*!< 20 byte data field. */
    eMCAN_BYTE24 = 4, /*!< 24 byte data field. */
    eMCAN_BYTE32 = 5, /*!< 32 byte data field. */
    eMCAN_BYTE48 = 6, /*!< 48 byte data field. */
    eMCAN_BYTE64 = 7  /*!< 64 byte data field. */
} E_MCAN_DATA_FIELD_SIZE;

/* MCAN Tx FIFO/Queue Mode. */
typedef enum
{
    eMCAN_QUEUE_MODE = 0, /*!< Tx FIFO operation. */
    eMCAN_FIFO_MODE = 1   /*!< Tx Queue operation. */
} E_MCAN_MODE;

/* TX Buffer Configuration Parameters  */
typedef struct
{
    E_MCAN_DATA_FIELD_SIZE  eDataFieldSize;     /*!< TX Buffer Data Field Size (8byte .. 64byte) */
    E_MCAN_MODE             eModeSel;           /*!< select: MCAN_QUEUE_MODE/MCAN_FIFO_MODE */
    uint32_t                u32ElemCnt;         /*!< Elements in FIFO/Queue */
    uint32_t                u32DBufNumber;      /*!< Number of dedicated TX buffers */
} MCAN_TX_BUF_CONFIG_T;


/* Nominal Bit Timing Parameters */
typedef struct
{
    uint32_t u32BitRate;          /*!< Transceiver baud rate in bps */
    uint16_t u16TDCOffset;        /*!< Transceiver Delay Compensation Offset */
    uint16_t u16TDCFltrWin;       /*!< Transceiver Delay Compensation Filter Window Length */
    uint8_t  u8TDC;               /*!< Transceiver Delay Compensation (1:Yes, 0:No) */
} MCAN_NBT_CONFIG_T;


/* Data Bit Timing Parameters */
typedef struct
{
    uint32_t u32BitRate;          /*!< Transceiver baud rate in bps */
    uint16_t u16TDCOffset;        /*!< Transceiver Delay Compensation Offset */
    uint16_t u16TDCFltrWin;       /*!< Transceiver Delay Compensation Filter Window Length */
    uint8_t  u8TDC;               /*!< Transceiver Delay Compensation (1:Yes, 0:No) */
} MCAN_DBT_CONFIG_T;

/*! MCAN protocol timing characteristic configuration structure. */
typedef struct
{
    uint8_t  u8PreDivider;        /*!< Global Clock Division Factor. */
    uint16_t u16NominalPrescaler;  /*!< Nominal clock prescaler. */
    uint8_t  u8NominalRJumpwidth; /*!< Nominal Re-sync Jump Width. */
    uint8_t  u8NominalPhaseSeg1;  /*!< Nominal Phase Segment 1. */
    uint8_t  u8NominalPhaseSeg2;  /*!< Nominal Phase Segment 2. */
    uint8_t  u8NominalPropSeg;    /*!< Nominal Propagation Segment. */
    uint8_t  u8DataPrescaler;     /*!< Data clock prescaler. */
    uint8_t  u8DataRJumpwidth;    /*!< Data Re-sync Jump Width. */
    uint8_t  u8DataPhaseSeg1;     /*!< Data Phase Segment 1. */
    uint8_t  u8DataPhaseSeg2;     /*!< Data Phase Segment 2. */
    uint8_t  u8DataPropSeg;       /*!< Data Propagation Segment. */

} MCAN_TIMEING_CONFIG_T;

/* MCAN module configuration structure. */
typedef struct
{
    MCAN_NBT_CONFIG_T sNormBitRate;       /*!< Normal bit rate. */
    MCAN_DBT_CONFIG_T sDataBitRate;       /*!< Data bit rate.   */
    MCAN_TIMEING_CONFIG_T sConfigBitTing; /*!< Bit timing config*/
    uint8_t bFDEn;                        /*!< 1 == FD Operation enabled. */
    uint8_t bBitRateSwitch;               /*!< 1 == Bit Rate Switch enabled (only evaluated in HW, if FD operation enabled). */
    uint8_t bEnableLoopBack;              /*!< 1 == Bit Rate Switch enabled (only evaluated in HW, if FD operation enabled). */
} MCAN_FD_BT_CONFIG_T;

/* MCAN Message RAM Partitioning - i.e. Start Addresses (BYTE) */
typedef struct
{
    uint32_t u32SIDFC_FLSSA; /*!<Standard ID Filter Configuration */
    uint32_t u32XIDFC_FLESA; /*!<Extended ID Filter Configuration */
    uint32_t u32RXF0C_F0SA;  /*!< RX FIFO 0 Start Address */
    uint32_t u32RXF1C_F1SA;  /*!< RX FIFO 1 Start Address */
    uint32_t u32RXBC_RBSA;   /*!< Rx Buffer Configuration */
    uint32_t u32TXEFC_EFSA;  /*!< Tx Event FIFO Configuration */
    uint32_t u32TXBC_TBSA;   /*!< Tx Buffer Configuration */
} MCAN_RAM_PART_T;

/*MCAN element size structure */
typedef struct
{
    uint32_t  u32SIDFC;          /*!< Standard Message ID Filter element size in words  */
    uint32_t  u32XIDFC;          /*!< Extended Message ID Filter element size in words  */
    uint32_t  u32RxFifo0;        /*!< Rx FIFO0 element size in words  */
    uint32_t  u32RxFifo1;        /*!< Rx FIFO1 element size in words  */
    uint32_t  u32RxBuf;          /*!< Rx Buffer element size in words */
    uint32_t  u32TxBuf;          /*!< Tx Buffer element size in words */
    uint32_t  u32TxEventFifo;    /*!< Tx Event FIFO element size in words */
} MCAN_ELEM_SIZE_T;

/* MCAN Message frame structure */
typedef struct
{
    MCAN_FD_BT_CONFIG_T     sBtConfig;        /*!< Bit Timing Configuration */
    MCAN_RAM_PART_T         sMRamStartAddr;   /*!< Absolute Byte Start Addresses for Element Types in Message RAM */
    MCAN_ELEM_SIZE_T        sElemSize;        /*!< Size of Elements in Message RAM (RX Elem. in FIFO0, in FIFO1, TX Buffer) given in words */
    MCAN_TX_BUF_CONFIG_T    sTxConfig;        /*!< TX Buffer Configuration  */
    uint32_t                u32MRamSize;      /*!< Size of the Message RAM: number of words */
} MCAN_FD_T;

/* MCAN Message ID Type */
typedef enum
{
    eMCAN_SID = 0,  /*!< Standard frame format attribute. */
    eMCAN_XID = 1   /*!< Extend frame format attribute. */
} E_MCAN_ID_TYPE;

/* MCAN Rx Message Type */
typedef enum
{
    eMCAN_RX_FIFO_0 = 0,
    eMCAN_RX_FIFO_1 = 1,
    eMCAN_RX_DBUF = 2
} E_MCAN_RX_BUF_TYPE;

/* MCAN Message receive Information: via which RX Buffers, etc. */
typedef struct
{
    E_MCAN_RX_BUF_TYPE  eRxBuf;         /*!< Type of RX Buffer */
    uint32_t            u32BufIdx;       /*!< RX Buffer: buffer index, if RX FIFO: GetIndex */
} MCAN_RX_INFO_T;

/* MCAN frame type. */
typedef enum
{
    eMCAN_DATA_FRM = 0,      /*!< Data frame type attribute. */
    eMCAN_REMOTE_FRM = 1     /*!< Remote frame type attribute. */
} E_MCAN_FRM_TYPE;

/* MCAN Message Struct */
typedef struct
{
    E_MCAN_ID_TYPE    eIdType;                         /*! Standard ID or Extended ID */
    MCAN_RX_INFO_T    sRxInfo;                         /*! Information regarding the reception of the frame */
    E_MCAN_FRM_TYPE   eFrmType;                        /*! eMCAN_DATA_FRM/eMCAN_REMOTE_FRM */
    uint32_t          u32Id;                           /*! Standard ID (11bits) or Extended ID (29bits) */
    uint32_t          u32DLC;                          /*! Data Length */
    union
    {
        uint32_t au32Data[MCAN_MAX_MESSAGE_WORDS];  /*!< Word access to buffer data. */
        uint8_t  au8Data[MCAN_MAX_MESSAGE_BYTES];   /*!< Byte access to buffer data. */
    };
    uint8_t           u8MsgMarker;                     /*! Message marker (will be copied to TX Event FIFO element) */
    uint8_t           bFDFormat;                       /*! FD Format (1 = FD Format) */
    uint8_t           bBitRateSwitch;                  /*! Bit Rate Switch (1 = with Bit Rate Switch) */
    uint8_t           bErrStaInd;                      /*! Error State Indicator */
    uint8_t           bEvntFifoCon;                    /*! Event FIFO Control (1 = Store TX Event FIFO element after transmission)*/
} MCAN_FD_MSG_T;


/*   Transmit and Receive message element structure. */
typedef struct
{
    uint32_t u32Id;     /*!< Message identifier and associated flags. */
    uint32_t u32Config; /*!< Buffer configuration. */
    union
    {
        uint32_t au32Data[MCAN_MAX_MESSAGE_WORDS];  /*!< Word access to buffer data. */
        uint8_t  au8Data[MCAN_MAX_MESSAGE_BYTES];   /*!< Byte access to buffer data. */
    };
} MCAN_BUF_T;

/* Standard ID message filter element structure.*/
typedef struct
{
    union
    {
        struct
        {
            uint32_t SFID2     : 11; /*!< Standard Filter ID 2. */
            uint32_t reserved1 : 5;
            uint32_t SFID1     : 11; /*!<Standard Filter ID 1. */
            uint32_t SFEC      : 3;  /*!<Standard Filter Element Configuration */
            uint32_t SFT       : 2;  /*!<Standard Filter Type */
        };
        struct
        {
            uint32_t VALUE; /*!< Access to filter as a word. */
        };
    };
} MCAN_STD_FILTER_T;

/* Extended ID message filter element structure.*/
typedef struct
{
    union
    {
        struct
        {
            uint32_t EFID1     : 29; /*!< Extended Filter ID 1. */
            uint32_t EFEC      : 3;  /*!< Extended Filter Element Configuration. */
            uint32_t EFID2     : 29; /*!< Extended Filter ID 2. */
            uint32_t reserved1 : 1;
            uint32_t EFT       : 2;  /*!< Extended Filter Type. */
        };
        struct
        {
            uint32_t LOWVALUE;  /*!< Access to filter low word. */
            uint32_t HIGHVALUE; /*!< Access to filter high word. */
        };
    };
} MCAN_EXT_FILTER_T;

/* Accept Non-matching Frames (GFC Register) */
typedef enum
{
    eMCAN_ACC_NON_MATCH_FRM_RX_FIFO0 = 0x0,  /*!< Accept Non-Masking Frames in Rx FIFO 0. */
    eMCAN_ACC_NON_MATCH_FRM_RX_FIFO1 = 0x1,  /*!< Accept Non-Masking Frames in Rx FIFO 1. */
    eMCAN_REJ_NON_MATCH_FRM   = 0x3          /*!< Reject Non-Matching Frames. */
} E_MCAN_ACC_NON_MATCH_FRM;


/* Standard ID Filter Element Type */
typedef enum
{
    eMCAN_SID_FLTR_TYPE_RANGE     = 0x0, /*!< Range filter from SFID1 to SFID2 (SFID2 ≥ SFID1). */
    eMCAN_SID_FLTR_TYPE_DUAL      = 0x1, /*!< Dual ID filter for SFID1 or SFID2. */
    eMCAN_SID_FLTR_TYPE_CLASSIC   = 0x2, /*!< Classic filter: SFID1 = filter, SFID2 = mask. */
    eMCAN_SID_FLTR_TYPE_DIS       = 0x3  /*!< Filter element disabled */
} E_MCAN_SID_FLTR_ELEM_TYPE;

/* Extended ID Filter Element Type */
typedef enum
{
    eMCAN_XID_FLTR_TYPE_RANGE      = 0x0,  /*!< Range filter from EFID1 to EFID2 (EFID2 ≥ EFID1). */
    eMCAN_XID_FLTR_TYPE_DUAL       = 0x1,  /*!< Dual ID filter for EFID1 or EFID2. */
    eMCAN_XID_FLTR_TYPE_CLASSIC    = 0x2,  /*!< Classic filter: EFID1=filter, EFID2=mask */
    eMCAN_XID_FLTR_TYPE_RANGE_XIDAM_NOT_APP     = 0x3   /*!< XID range filter from EFID1 to EFID2(EFID2 > EFID1), XIDAM not applied */
}  E_MCAN_XID_FLTR_ELEM_TYPE;

/* Filter Element Configuration - Can be used for SFEC(Standard Id filter configuration) and EFEC(Extended Id filter configuration) */
typedef enum
{
    eMCAN_FLTR_ELEM_DIS         = 0x0,            /*!< Filter Element Disable  */
    eMCAN_FLTR_ELEM_STO_FIFO0   = 0x1,            /*!< Filter Element Store In Fifo0  */
    eMCAN_FLTR_ELEM_STO_FIFO1   = 0x2,            /*!< Filter Element Store In Fifo1  */
    eMCAN_FLTR_ELEM_REJ_ID      = 0x3,            /*!< Filter Element RejectId  */
    eMCAN_FLTR_ELEM_SET_PRI     = 0x4,            /*!< Filter Element Set Priority */
    eMCAN_FLTR_ELEM_SET_PRI_STO_FIFO0 = 0x5,      /*!< Filter Element Set Priority And Store In Fifo0  */
    eMCAN_FLTR_ELEM_SET_PRI_STO_FIFO1 = 0x6,      /*!< Filter Element Set Priority And Store In Fifo1  */
    eMCAN_FLTR_ELEM_STO_RX_BUF_OR_DBG_MSG = 0x7   /*!< Filter Element Store In Rx Buf Or Debug Msg  */
} E_MCAN_FLTR_CONFIG;

/* TX Event FIFO Element Struct */
typedef struct
{
    E_MCAN_ID_TYPE      eIdType;         /*!< Standard ID or Extended ID */
    uint32_t            u32Id;           /*!< Standard ID (11bits) or Extended ID (29bits) */
    uint32_t            u32DLC;          /*!< Data Length Code used in the frame on the bus */
    uint32_t            u32TxTs;         /*!< Tx Timestamp */
    uint32_t            u32MsgMarker;    /*!< Message marker */
    uint8_t             bErrStaInd;      /*!< Error State Indicator */
    uint8_t             bRemote;         /*!< Remote transmission request */
    uint8_t             bFDFormat;       /*!< FD Format */
    uint8_t             bBitRateSwitch;  /*!< Bit Rate Switch */
} MCAN_TX_EVNT_ELEM_T;


void MCAN_Open(MCAN_T *mcan, MCAN_FD_T *psCanfdStr);
void MCAN_Close(MCAN_T *mcan);
void MCAN_EnableInt(MCAN_T *mcan, uint32_t u32IntLine0, uint32_t u32IntLine1, uint32_t u32TXBTIE, uint32_t u32TXBCIE);
void MCAN_DisableInt(MCAN_T *mcan, uint32_t u32IntLine0, uint32_t u32IntLine1, uint32_t u32TXBTIE, uint32_t u32TXBCIE);
uint32_t MCAN_TransmitTxMsg(MCAN_T *mcan, uint32_t u32TxBufIdx, MCAN_FD_MSG_T *psTxMsg);
uint32_t MCAN_TransmitDMsg(MCAN_T *mcan, uint32_t u32TxBufIdx, MCAN_FD_MSG_T *psTxMsg);
void MCAN_SetGFC(MCAN_T *mcan, E_MCAN_ACC_NON_MATCH_FRM eNMStdFrm, E_MCAN_ACC_NON_MATCH_FRM eEMExtFrm, uint32_t u32RejRmtStdFrm, uint32_t u32RejRmtExtFrm);
void MCAN_InitRxFifo(MCAN_T *mcan, uint32_t u32RxFifoNum, MCAN_RAM_PART_T *psRamConfig, MCAN_ELEM_SIZE_T *psElemSize, uint32_t u32FifoWM, E_MCAN_DATA_FIELD_SIZE eFifoSize);
void MCAN_InitRxDBuf(MCAN_T *mcan, MCAN_RAM_PART_T *psRamConfig, MCAN_ELEM_SIZE_T *psElemSize, E_MCAN_DATA_FIELD_SIZE eRxBufSize);
void MCAN_InitTxDBuf(MCAN_T *mcan, MCAN_RAM_PART_T *psRamConfig, MCAN_ELEM_SIZE_T *psElemSize, E_MCAN_DATA_FIELD_SIZE eTxBufSize);
void MCAN_InitTxEvntFifo(MCAN_T *mcan, MCAN_RAM_PART_T *psRamConfig, MCAN_ELEM_SIZE_T *psElemSize, uint32_t u32FifoWaterLvl);
void MCAN_ConfigSIDFC(MCAN_T *mcan, MCAN_RAM_PART_T *psRamConfig, MCAN_ELEM_SIZE_T *psElemSize);
void MCAN_ConfigXIDFC(MCAN_T *mcan, MCAN_RAM_PART_T *psRamConfig, MCAN_ELEM_SIZE_T *psElemSize);
void MCAN_SetSIDFltr(MCAN_T *mcan, uint32_t u32FltrIdx, uint32_t u32Filter);
void MCAN_SetXIDFltr(MCAN_T *mcan, uint32_t u32FltrIdx, uint32_t u32FilterLow, uint32_t u32FilterHigh);
uint32_t MCAN_ReadRxBufMsg(MCAN_T *mcan, uint8_t u8MbIdx, MCAN_FD_MSG_T *psMsgBuf);
uint32_t MCAN_ReadRxFifoMsg(MCAN_T *mcan, uint8_t u8FifoIdx, MCAN_FD_MSG_T *psMsgBuf);
void MCAN_CopyDBufToMsgBuf(MCAN_BUF_T *psRxBuffer, MCAN_FD_MSG_T *psMsgBuf);
void MCAN_CopyRxFifoToMsgBuf(MCAN_BUF_T *psRxBuf, MCAN_FD_MSG_T *psMsgBuf);
uint32_t MCAN_GetRxFifoWaterLvl(MCAN_T *mcan, uint32_t u32RxFifoNum);
void MCAN_TxBufCancelReq(MCAN_T *mcan, uint32_t u32TxBufIdx);
uint32_t MCAN_IsTxBufCancelFin(MCAN_T *mcan, uint32_t u32TxBufIdx);
uint32_t MCAN_IsTxBufTransmitOccur(MCAN_T *mcan, uint32_t u32TxBufIdx);
uint32_t MCAN_GetTxEvntFifoWaterLvl(MCAN_T *mcan);
void MCAN_CopyTxEvntFifoToUsrBuf(MCAN_T *mcan, uint32_t u32TxEvntNum, MCAN_TX_EVNT_ELEM_T *psTxEvntElem);
void MCAN_GetBusErrCount(MCAN_T *mcan, uint8_t *pu8TxErrBuf, uint8_t *pu8RxErrBuf);
void MCAN_RunToNormal(MCAN_T *mcan, uint8_t u8Enable);
void MCAN_GetDefaultConfig(MCAN_FD_T *psConfig, uint8_t u8OpMode);
void MCAN_ClearStatusFlag(MCAN_T *mcan, uint32_t u32InterruptFlag);
uint32_t MCAN_GetStatusFlag(MCAN_T *mcan, uint32_t u32IntTypeFlag);

/*@}*/ /* end of group MCAN_EXPORTED_FUNCTIONS */

/*@}*/ /* end of group MCAN_Driver */

/*@}*/ /* end of group Standard_Driver */

#ifdef __cplusplus
}
#endif

#endif /* __MCAN_H__ */
